---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: exposeapps.expose-traffic-outside-cluster.bailu.io
spec:
  group: expose-traffic-outside-cluster.bailu.io
  names:
    kind: ExposeApp
    listKind: ExposeAppList
    plural: exposeapps
    singular: exposeapp
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExposeApp is the Schema for the exposeapps API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExposeAppSpec defines the desired state of ExposeApp
            properties:
              enableIngress:
                description: 'Important: Run "make manifests" to regenerate code after
                  modifying this file EnableIngress is not required, so we use omitempty
                  EnableIngress is a boolean value to enable or enable the ingress'
                type: boolean
              enableService:
                description: EnableService is a boolean value to enable or enable
                  the service
                type: boolean
              image:
                description: Image is the image of the application
                type: string
              ingressPorts:
                description: IngressPorts is the port of the ingress
                items:
                  description: IngressRule represents the rules mapping the paths
                    under a specified host to the related backend services. Incoming
                    requests are first evaluated for a host match, then routed to
                    the backend associated with the matching IngressRuleValue.
                  properties:
                    host:
                      description: "host is the fully qualified domain name of a network
                        host, as defined by RFC 3986. Note the following deviations
                        from the \"host\" part of the URI as defined in RFC 3986:
                        1. IPs are not allowed. Currently an IngressRuleValue can
                        only apply to the IP in the Spec of the parent Ingress. 2.
                        The `:` delimiter is not respected because ports are not allowed.
                        Currently the port of an Ingress is implicitly :80 for http
                        and :443 for https. Both these may change in the future. Incoming
                        requests are matched against the host before the IngressRuleValue.
                        If the host is unspecified, the Ingress routes all traffic
                        based on the specified IngressRuleValue. \n host can be \"precise\"
                        which is a domain name without the terminating dot of a network
                        host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain
                        name prefixed with a single wildcard label (e.g. \"*.foo.com\").
                        The wildcard character '*' must appear by itself as the first
                        DNS label and matches only a single label. You cannot have
                        a wildcard label by itself (e.g. Host == \"*\"). Requests
                        will be matched against the Host field in the following way:
                        1. If host is precise, the request matches this rule if the
                        http host header is equal to Host. 2. If host is a wildcard,
                        then the request matches this rule if the http host header
                        is to equal to the suffix (removing the first label) of the
                        wildcard rule."
                      type: string
                    http:
                      description: 'HTTPIngressRuleValue is a list of http selectors
                        pointing to backends. In the example: http://<host>/<path>?<searchpart>
                        -> backend where where parts of the url correspond to RFC
                        3986, this resource will be used to match against everything
                        after the last ''/'' and before the first ''?'' or ''#''.'
                      properties:
                        paths:
                          description: paths is a collection of paths that map requests
                            to backends.
                          items:
                            description: HTTPIngressPath associates a path with a
                              backend. Incoming urls matching the path are forwarded
                              to the backend.
                            properties:
                              backend:
                                description: backend defines the referenced service
                                  endpoint to which the traffic will be forwarded
                                  to.
                                properties:
                                  resource:
                                    description: resource is an ObjectRef to another
                                      Kubernetes resource in the namespace of the
                                      Ingress object. If resource is specified, a
                                      service.Name and service.Port must not be specified.
                                      This is a mutually exclusive setting with "Service".
                                    properties:
                                      apiGroup:
                                        description: APIGroup is the group for the
                                          resource being referenced. If APIGroup is
                                          not specified, the specified Kind must be
                                          in the core API group. For any other third-party
                                          types, APIGroup is required.
                                        type: string
                                      kind:
                                        description: Kind is the type of resource
                                          being referenced
                                        type: string
                                      name:
                                        description: Name is the name of resource
                                          being referenced
                                        type: string
                                    required:
                                    - kind
                                    - name
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  service:
                                    description: service references a service as a
                                      backend. This is a mutually exclusive setting
                                      with "Resource".
                                    properties:
                                      name:
                                        description: name is the referenced service.
                                          The service must exist in the same namespace
                                          as the Ingress object.
                                        type: string
                                      port:
                                        description: port of the referenced service.
                                          A port name or port number is required for
                                          a IngressServiceBackend.
                                        properties:
                                          name:
                                            description: name is the name of the port
                                              on the Service. This is a mutually exclusive
                                              setting with "Number".
                                            type: string
                                          number:
                                            description: number is the numerical port
                                              number (e.g. 80) on the Service. This
                                              is a mutually exclusive setting with
                                              "Name".
                                            format: int32
                                            type: integer
                                        type: object
                                    required:
                                    - name
                                    type: object
                                type: object
                              path:
                                description: path is matched against the path of an
                                  incoming request. Currently it can contain characters
                                  disallowed from the conventional "path" part of
                                  a URL as defined by RFC 3986. Paths must begin with
                                  a '/' and must be present when using PathType with
                                  value "Exact" or "Prefix".
                                type: string
                              pathType:
                                description: 'pathType determines the interpretation
                                  of the path matching. PathType can be one of the
                                  following values: * Exact: Matches the URL path
                                  exactly. * Prefix: Matches based on a URL path prefix
                                  split by ''/''. Matching is done on a path element
                                  by element basis. A path element refers is the list
                                  of labels in the path split by the ''/'' separator.
                                  A request is a match for path p if every p is an
                                  element-wise prefix of p of the request path. Note
                                  that if the last element of the path is a substring
                                  of the last element in request path, it is not a
                                  match (e.g. /foo/bar matches /foo/bar/baz, but does
                                  not match /foo/barbaz). * ImplementationSpecific:
                                  Interpretation of the Path matching is up to the
                                  IngressClass. Implementations can treat this as
                                  a separate PathType or treat it identically to Prefix
                                  or Exact path types. Implementations are required
                                  to support all path types.'
                                type: string
                            required:
                            - backend
                            - pathType
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      required:
                      - paths
                      type: object
                  type: object
                type: array
              ports:
                description: ExposeAppPort is the port of the application
                items:
                  description: ContainerPort represents a network port in a single
                    container.
                  properties:
                    containerPort:
                      description: Number of port to expose on the pod's IP address.
                        This must be a valid port number, 0 < x < 65536.
                      format: int32
                      type: integer
                    hostIP:
                      description: What host IP to bind the external port to.
                      type: string
                    hostPort:
                      description: Number of port to expose on the host. If specified,
                        this must be a valid port number, 0 < x < 65536. If HostNetwork
                        is specified, this must match ContainerPort. Most containers
                        do not need this.
                      format: int32
                      type: integer
                    name:
                      description: If specified, this must be an IANA_SVC_NAME and
                        unique within the pod. Each named port in a pod must have
                        a unique name. Name for the port that can be referred to by
                        services.
                      type: string
                    protocol:
                      default: TCP
                      description: Protocol for port. Must be UDP, TCP, or SCTP. Defaults
                        to "TCP".
                      type: string
                  required:
                  - containerPort
                  type: object
                type: array
              replicas:
                description: Replicas is the number of replicas of the application
                format: int32
                type: integer
              servicePorts:
                description: ServicePorts is the port of the service
                items:
                  description: ServicePort contains information on service's port.
                  properties:
                    appProtocol:
                      description: "The application protocol for this port. This is
                        used as a hint for implementations to offer richer behavior
                        for protocols that they understand. This field follows standard
                        Kubernetes label syntax. Valid values are either: \n * Un-prefixed
                        protocol names - reserved for IANA standard service names
                        (as per RFC-6335 and https://www.iana.org/assignments/service-names).
                        \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c'
                        - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
                        * 'kubernetes.io/ws'  - WebSocket over cleartext as described
                        in https://www.rfc-editor.org/rfc/rfc6455 * 'kubernetes.io/wss'
                        - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
                        \n * Other protocols should use implementation-defined prefixed
                        names such as mycompany.com/my-custom-protocol."
                      type: string
                    name:
                      description: The name of this port within the service. This
                        must be a DNS_LABEL. All ports within a ServiceSpec must have
                        unique names. When considering the endpoints for a Service,
                        this must match the 'name' field in the EndpointPort. Optional
                        if only one ServicePort is defined on this service.
                      type: string
                    nodePort:
                      description: 'The port on each node on which this service is
                        exposed when type is NodePort or LoadBalancer.  Usually assigned
                        by the system. If a value is specified, in-range, and not
                        in use it will be used, otherwise the operation will fail.  If
                        not specified, a port will be allocated if this Service requires
                        one.  If this field is specified when creating a Service which
                        does not need it, creation will fail. This field will be wiped
                        when updating a Service to no longer need it (e.g. changing
                        type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                      format: int32
                      type: integer
                    port:
                      description: The port that will be exposed by this service.
                      format: int32
                      type: integer
                    protocol:
                      default: TCP
                      description: The IP protocol for this port. Supports "TCP",
                        "UDP", and "SCTP". Default is TCP.
                      type: string
                    targetPort:
                      anyOf:
                      - type: integer
                      - type: string
                      description: 'Number or name of the port to access on the pods
                        targeted by the service. Number must be in the range 1 to
                        65535. Name must be an IANA_SVC_NAME. If this is a string,
                        it will be looked up as a named port in the target Pod''s
                        container ports. If this is not specified, the value of the
                        ''port'' field is used (an identity map). This field is ignored
                        for services with clusterIP=None, and should be omitted or
                        set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                      x-kubernetes-int-or-string: true
                  required:
                  - port
                  type: object
                type: array
            required:
            - enableService
            - image
            - ingressPorts
            - ports
            - replicas
            - servicePorts
            type: object
          status:
            description: ExposeAppStatus defines the observed state of ExposeApp
            type: object
        type: object
    served: true
    storage: true
#    subresources:
#      status: {}
